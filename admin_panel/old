package main

import (
	"strings"
	"time"

	"github.com/HuckRidgeSW/hvue"
	"github.com/gopherjs/gopherwasm/js"
)

func helloVue() {
	app := hvue.NewVM(
		hvue.El("#app"),
		hvue.Data("message", "Hello, Vue!"))
	js.Global().Set("app", app.Value)
}

func helloVue2() {
	app := hvue.NewVM(
		hvue.El("#app-2"),
		hvue.Data("message", "You loaded this page on "+time.Now().String()))
	js.Global().Set("app", app.Value)
}

func seen() {
	app := hvue.NewVM(
		hvue.El("#app-3"),
		hvue.Data("seen", true))
	js.Global().Set("app", app.Value)
}

func todos() {
	type Todo struct {
		Text string
	}
	data := hvue.NewArray()
	data.SetIndex(0, Todo{Text: "lalal"})

	app := hvue.NewVM(
		hvue.El("#app-4"),
		hvue.Data("todos", data))
	js.Global().Set("app4", app.Value)
}

type Data5 struct {
	js.Value

	// Demonstrate hvue.NewVM setting a *hvue.VM field of a data object
	*hvue.VM
}

func (d *Data5) Message() string       { return d.Get("message").String() }
func (d *Data5) SetMessage(new string) { d.Value.Set("message", new) }

func (d *Data5) ReverseMessage() {
	hvue.Log("Data5.ReverseMessage: d.VM:", d.VM.Value)
	d.SetMessage(reverse(d.Message()))
}

func pressAButton() {
	d5 := &Data5{Value: hvue.NewObject()}
	d5.SetMessage("Hello, Vue!")
	app := hvue.NewVM(
		hvue.El("#app-5"),
		hvue.DataS(d5, d5.Value),
		hvue.MethodsOf(d5)) // FIXME: Could &Data5{} be d5?
	js.Global().Set("app5", app.Value)

}

func twoWayBinding() {
	hvue.NewComponent("manos-span",
		hvue.Props("todo"),
		hvue.Template("<li>{{ todo }}</li>"))
	LoginPage()
	app := hvue.NewVM(
		hvue.El("#app-6"),
		hvue.Data("message", "lahehalla "),
	)
	js.Global().Set("app6", app.Value)
}

func routing() {
	as := AuthService{}
	hvue.Log(as.getToken())
	AdminPage()
	LoginPage()
	app := hvue.NewVM(
		hvue.El("#app-7"),
		hvue.Data("isAdmin", len(as.getToken()) > 0),
	)
	js.Global().Set("app7", app.Value)
}
func reverse(s string) string {
	runes := strings.Split(s, "")
	for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {
		runes[i], runes[j] = runes[j], runes[i]
	}
	return strings.Join(runes, "")
}

func main() {
	go helloVue()
	go helloVue2()
	go seen()
	go todos()
	go pressAButton()
	go twoWayBinding()
	go routing()
}


package main

import (
	"github.com/HuckRidgeSW/hvue"
	"github.com/gopherjs/gopherwasm/js"
)

type AdminPageData struct {
	js.Value
}

func (d *AdminPageData) Movies(){
	js.Global().Get("movies")
}

func (d *AdminPageData) Logout() {
	as := AuthService{}
	as.saveToken("")
	js.Global().Get("location").Call("reload")
}
func AdminPage() {
	tmpl := `
<div>
<h1>Admin</h1>
<button v-on:click="Logout">Logout</button>
<br/>
<ul>
	<li v-for="movie in movies">
		<span>{{ movie.name }}</span>
	</li>
</ul>
<br/>
<div>
	<span>Name</span>
	<input v-model="name">
	<br/>
	<span>Link</span>
	<input v-model="link">
	<br/>
	<button v-on:click="Download">Download</button>
</div>
<br/>
</div>
`

	hvue.NewComponent("admin-page",
		hvue.Template(tmpl),
		hvue.DataFunc(func(_ *hvue.VM, o js.Value) interface{} {
			return &AdminPageData{Value: o}
		}),
		hvue.MethodsOf(&AdminPageData{}))
}


package admin

import (
	"net/http"

	"github.com/jinzhu/gorm"
	"github.com/labstack/echo"
	"github.com/mragiadakos/borinema/server/conf"
	"github.com/mragiadakos/borinema/server/utils"
)

type adminApi struct {
	db *gorm.DB
}

func NewAdminApi(db *gorm.DB) *adminApi {
	aa := &adminApi{}
	aa.db = db
	return aa
}

func (aa *adminApi) AuthorizeAdminMiddleware(next echo.HandlerFunc) echo.HandlerFunc {
	return func(c echo.Context) error {
		if utils.IsAdmin(c) {
			return next(c)
		} else {
			return c.JSON(http.StatusUnauthorized, "")
		}
	}
}

func (aa *adminApi) Login(config conf.Configuration) func(echo.Context) error {
	return func(c echo.Context) error {
		opts := AuthorizationAdminInput{}
		err := c.Bind(&opts)
		if err != nil {
			return c.JSON(http.StatusUnsupportedMediaType, err.Error())
		}
		isValid := func(opts AuthorizationAdminInput) bool {
			return config.AdminUsername == opts.Username && config.AdminPassword == opts.Password
		}
		al := AdminLogic{}
		sa, errMsg := al.AuthorizeAdmin(opts, isValid, utils.GetTokenAdmin(config))
		if errMsg != nil {
			return c.JSON(errMsg.Status, errMsg.Json())
		}
		return c.JSON(http.StatusAccepted, sa)
	}
}

func (aa *adminApi) IsAdmin() func(echo.Context) error {
	return func(c echo.Context) error {
		al := AdminLogic{}
		output := al.IsAdmin(func() bool {
			return utils.IsAdmin(c)
		})
		return c.JSON(http.StatusOK, output)
	}
}

func (aa *adminApi) AdminPage() func(c echo.Context) error {
	return func(c echo.Context) error {
		return c.File("admin_panel/index.html")
	}
}



package main

import (
	"github.com/HuckRidgeSW/hvue"
	"github.com/gopherjs/gopherwasm/js"
)

type LoginPageData struct {
	js.Value
}

func (d *LoginPageData) Username() string       { return d.Get("username").String() }
func (d *LoginPageData) SetUsername(new string) { d.Value.Set("username", new) }
func (d *LoginPageData) Password() string       { return d.Get("password").String() }
func (d *LoginPageData) SetPassword(new string) { d.Value.Set("password", new) }

func (d *LoginPageData) Submit() {
	hvue.Log("submit:", d.Value)
	authJson := AuthorizationJson{
		Username: d.Username(),
		Password: d.Password(),
	}
	as := AuthService{}
	token, err := as.postLogin(authJson)
	hvue.Log(token, " ", err)
	as.saveToken(token)
	hvue.Log("token: ", as.getToken())
	d.SetUsername("")
	d.SetPassword("")
	js.Global().Get("location").Call("reload")

}

func LoginPage() {
	tmpl := `
<div>
<span>Username</span>
<input v-model="username">
<br/>
<span>Password</span>
<input v-model="password">
<br/>
<button v-on:click="Submit">Submit</button>
</div>
`

	hvue.NewComponent("login-page",
		hvue.DataFunc(func(_ *hvue.VM, o js.Value) interface{} {
			ld := &LoginPageData{Value: o}
			ld.SetUsername("")
			ld.SetPassword("")
			return ld
		}, "username", "password"),
		hvue.MethodsOf(&LoginPageData{}),
		hvue.Template(tmpl))
}

<div id="app">
        {{ message }}
</div>
<hr>
<div id="app-2">
        <span v-bind:text="message"></span>
</div>
<hr>
<div id="app-3">
        <p v-if="seen">Now you see me</p>
</div>
<hr />
<div id="app-4">
        <ol>
                <li v-for="todo in todos">
                        {{todo.Text}}
                </li>
        </ol>
</div>
<hr />
<div id="app-5">
        <p>{{ message }}</p>
        <button v-on:click="ReverseMessage">Reverse Message</button>
</div>
<hr />
<div id="app-6">
        <p>{{ message }}</p>
        <manos-span v-bind:todo="message"></manos-span>
        <input v-model="message">
</div>
<hr />
<div id="app-7">
        <div v-if="!isAdmin">
                <login-page></login-page>

        </div>
        <div v-if="isAdmin">
                <admin-page></admin-page>
        </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js"></script>
<script src="/admin_panel/wasm_start.js"></script>
<script src="/admin_panel/admin_panel.js"></script>